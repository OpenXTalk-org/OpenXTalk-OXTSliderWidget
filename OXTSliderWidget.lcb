/**

Description:
Widget

Name: mouseMove

Type: message

Name: mouseDown

Type: message

Name: mouseUp

Type: message

Name: mouseRelease

Type: message

Name: scrollbarBeginning

Type: message

Name: scrollbarDrag

Type: message

Name: scrollbarEnd

Type: message

Name: backgroundColor

Type: property

Name: hiliteColor

Type: property

Name: outerShadowColor

Type: property

**/
widget org.openxtalk.widget.oxtslider

-- dependancy declarations
use com.livecode.canvas
use com.livecode.string
use com.livecode.char
use com.livecode.widget
use com.livecode.engine
use com.livecode.library.widgetutils
use com.livecode.math

-- adding metadata to ensure the extension displays correctly in livecode
metadata title is "OXT Slider"
metadata author is "Paul McClernan"
metadata version is "0.1"
metadata preferredSize is "64,256"
-- metadata svgicon is ""

-------------------------------------------------------------------  Properties --------------------------------------------------------------------------------------

private variable mBarRect as Rectangle
private variable mTop as Number
private variable mRight as Number
private variable mPercentVal as Number
private variable mMouseDown as optional Boolean

private variable mOnlyFillWhileMoving as Boolean
property onlyFillWhileMoving	 get mOnlyFillWhileMoving	  set setOnlyFillWhileMoving
metadata onlyFillWhileMoving.editor is "com.livecode.pi.boolean"
-- metadata deadZoneSize.section is "Basic"
metadata onlyFillWhileMoving.label is "Only fill while moving"
metadata onlyFillWhileMoving.default is "false"
metadata onlyFillWhileMoving.section is "Basic"
public handler setOnlyFillWhileMoving(in pBoolean as Boolean)
	put pBoolean into mOnlyFillWhileMoving
   OnGeometryChanged()
	redraw all
end handler

private variable mHoriz as Boolean
property horizontalOrentation	 get mHoriz	  set setHorizOrientation
metadata horizontalOrentation.editor is "com.livecode.pi.boolean"
-- metadata deadZoneSize.section is "Basic"
metadata horizontalOrentation.label is "Horizontal orientation"
metadata horizontalOrentation.default is "false"
metadata horizontalOrentation.section is "Basic"
public handler setHorizOrientation(in pBoolean as Boolean)
	put pBoolean into mHoriz
   OnGeometryChanged()
	redraw all
end handler

------------------------------ Main Rendering ------------------------------
public handler OnPaint()
   set the antialias of this canvas to true

   variable tH as Integer
   variable tW as Integer
   put my height into tH
   put my width into tW
   ------------------------------ Horizontal orientation ------------------------------
   if mHoriz then
      set the stroke width of this canvas to 10  -- (tW * 0.1)
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke line path from point [0, tH / 2 ] to point[ tW, tH / 2 ] on this canvas
      if mBarRect is not nothing then
         if mMouseDown then --- rendereed while dragging slider
            set the paint of this canvas to solid paint with color [0,1,0, 1.0 - mPercentVal]
            -- set the paint of this canvas to solid paint with my foreground paint
            fill rounded rectangle path of mBarRect with radius 4 on this canvas
			end if
         -- rectangle [ Left, Top, Right, Bottom]
         begin layer with outer shadow effect on this canvas
            set the paint of this canvas to solid paint with color [0,1,0,1]
            set the stroke width of this canvas to 5 -- (tH * 0.05)
            -- stroke line path from point [ mRight , 0  ] to point[ mRight, tH] on this canvas
            -- fill arc path centered at point [tW/2, mTop] with radius (0.33 * tW) on this canvas
            fill circle path centered at point [mRight,tH/2] with radius (0.125 * tH) on this canvas
				-- fill rectangle path of rectangle [mRight-(tW * 0.05),0+(tH* 0.1),mRight+(tW * 0.05),tH - (tH * 0.1)] on this canvas
         end layer on this canvas
      end if
      ------------------------------ Vertical orientation ------------------------------
   else
      set the stroke width of this canvas to 10  -- (tW * 0.1)
      set the paint of this canvas to solid paint with color [0,0,0,1]
      stroke line path from point [tW / 2, 0 ] to point[tW / 2,tH] on this canvas
      if mBarRect is not nothing then
         if mMouseDown then --- rendereed while dragging slider
            set the paint of this canvas to solid paint with color [0,1,0,mPercentVal]
            -- set the paint of this canvas to solid paint with my foreground paint
            fill rounded rectangle path of mBarRect with radius 4 on this canvas
         end if
         -- rectangle [ Left, Top, Right, Bottom]
         begin layer with outer shadow effect on this canvas
            set the paint of this canvas to solid paint with color [0,1,0,1]
            set the stroke width of this canvas to 5 -- (tH * 0.05)
            -- stroke line path from point [0,mTop] to point[tW, mTop] on this canvas
            -- fill arc path centered at point [tW/2, mTop] with radius (0.33 * tW) on this canvas
            fill circle path centered at point [tW/2, mTop] with radius (0.125 * tW) on this canvas
         end layer on this canvas
      end if
   end if

	if mOnlyFillWhileMoving is false then --- rendereed while dragging slider
		if mHoriz then
			set the paint of this canvas to solid paint with color [0,1,0, 1.0 - mPercentVal]
		else
			set the paint of this canvas to solid paint with color [0,1,0,mPercentVal]
		end if
		-- set the paint of this canvas to solid paint with my foreground paint
		fill rounded rectangle path of mBarRect with radius 4 on this canvas
	end if
      -- set the paint of this canvas to solid paint with color [0,0,0,1]
      -- stroke rectangle path of rectangle[0,0, tW, tH] on this canvas
 end handler

 --------------------------------------------------------  Mouse Handlers ------------------------------------------------------------
 -- * scrollbarBeginning pStart
 -- * scrollbarEnd pEnd
 -- * scrollbarDrag pNewPosition
 -- Not used, may be more useful for a 'stepper' control
 -- scrollbarLineDec pNewPosition
 -- scrollbarLineInc pNewPosition
 -- scrollbarPageInc pNewPosition
 -- scrollbarPageDec pNewPosition

 public handler OnMouseUp()
     put false into mMouseDown
     if the mouse position is within my bounds then
       post "mouseUp" with [the click button] -- to my script object
     else
        post "mouseRelease" with [the click button]
     end if
     post "scrollbarEnd" with [mPercentVal]
     redraw all
   end handler

   public handler OnMouseDown()
      put true into mMouseDown
      post "mouseDown" to my script object with [the click button] -- to my script object
      post "scrollbarBeginning" to my script object with [mPercentVal] -- to my script object
      OnMouseMove()
   end handler

   public handler OnMouseMove()
      if mMouseDown is not nothing and mMouseDown is true then
         variable tPosition as Point
         put the mouse position into tPosition
         post "mouseMove" with [the x of tPosition, the y of tPosition]
         ------------------------------ Horizontal orientation
         if mHoriz then
            put (my width -  the x of tPosition) into mPercentVal
            put my width - mPercentVal into mRight
            put mPercentVal / my width into mPercentVal
            if mPercentVal > 1.0 then
               put 1.0 into mPercentVal
               put my width into mRight
            end if
            if mPercentVal <= 0 then
               put 0 into mPercentVal
               put rectangle [0,0,0,0] into mBarRect
               put 0 into mRight
            else
               put rectangle [0,0, mRight, my height] into mBarRect
            end if
            -- log [mPercentVal, tTop]
         ------------------------------ Vertical orientation
         else
            put (my height -  the y of tPosition) into mPercentVal
            put my height - mPercentVal into mTop
            put mPercentVal / my height into mPercentVal
            if mPercentVal > 1.0 then
               put 1.0 into mPercentVal
               put 0 into mTop
            end if
            if mPercentVal <= 0 then
               put 0 into mPercentVal
               put my height into mTop
               put rectangle [0,0,0,0] into mBarRect
            else
               put rectangle [0, mTop, my width, my height] into mBarRect
            end if
            -- log [mPercentVal, tTop]
         end if
         post "scrollbarDrag" with [mPercentVal]
      end if
   redraw all
end handler

public handler OnMouseCancel()
   -- put false into mPianoMouseButtonDown
   OnMouseUp()
end handler
--public handler OnMouseCancelHover()
--   put false into mPianoMouseButtonDown
--   OnMouseUp()
--end handler

--public handler OnMouseEnter()
   --variable tMouseButtonState as String
   --execute script "global gPianoMouseButtonDown ; return gPianoMouseButtonDown"
   --execute script "return mouse()"
   -- log the result
   --if the result is "up" then
      --put false into mPianoMouseButtonDown
       -- OnMouseUp()
   --else
       --put true into mPianoMouseButtonDown
       -- OnMouseDown()
   --end if
--end handler

--------------------------------------------------------------------------  Creating & Redrawing --------------------------------------------------------------------------------------
--- called when widget is created
public handler OnCreate()
	put false into mOnlyFillWhileMoving
   put false into mHoriz
   put false into mMouseDown
   put 0.5 into mPercentVal
   put (my height / 2) into mTop
   put (my width / 2) into mRight
   if mHoriz then
      put rectangle [0, 0, mRight, my height ] into mBarRect
   else
      put rectangle [0, mTop, my width, my height ] into mBarRect
   end if
   redraw all
end handler

-- called when the widget is resizedd
public handler OnGeometryChanged()
 if mHoriz then
      put my width - (my width *  mPercentVal) into mRight
      -- put rectangle [0, my height/2 - tSliderHeight/2, my width, my height/2 + tSliderHeight/2] into mSliderBounds
      put rectangle [0, 0, mRight, my height] into mBarRect
      -- log [mPercentVal, tTop]
   else
      put my height - (my height *  mPercentVal) into mTop
      -- put rectangle [0, my height/2 - tSliderHeight/2, my width, my height/2 + tSliderHeight/2] into mSliderBounds
      put rectangle [0, mTop, my width, my height] into mBarRect
      -- log [mPercentVal, tTop]
   end if
   redraw all
end handler

-- this handler is called when a card containg the widget is opened
public handler OnOpen()
   OnGeometryChanged()
   redraw all
end handler


------------- Utility Handlers -----------------

--- Monte's point-within-path handler:
public handler hitTestPath(in pPoint as Point, in pPath as Path, in pStrokeWidth as Number, in pWithin as Boolean) returns Boolean
	-- set pWithin true and pStrokeWidth to 0 if you want to hit-test the filled path
	-- set pWithin false and pStrokeWidth != 0 if you want hit-test the stroked path (i.e. just the outline)
	-- set pWithin true and pStrokeWidth != 0 if you want to hit-test the stroked and filled path.
	------------------------------------------------------------------------------------------------------------------------------
	-- create a 1 x 1 canvas
	variable tCanvas as Canvas
	put a new canvas with size [1,1] into tCanvas
	-- ensure we either get pixels drawn with our color or not drawn
	set the antialias of tCanvas to false
	-- translate the path by the point
	translate pPath by [-(the x of pPoint), -(the y of pPoint)]
	-- draw the path to the canvas
	set the paint of tCanvas to solid paint with color [0.0, 0.0, 0.0, 1.0]
	if pStrokeWidth is 0 and not pWithin then
		put 1 into pStrokeWidth
	end if
	if pWithin then
		fill pPath on tCanvas
	end if
	if pStrokeWidth > 0 then
		set the stroke width of tCanvas to pStrokeWidth
		stroke pPath on tCanvas
	end if
	-- get the pixel data of the canvas
	variable tData as Data
	put the pixel data of tCanvas into tData
	-- return whether pixel is opaque
	return the first byte of tData is the byte with code 255
end handler

end widget
